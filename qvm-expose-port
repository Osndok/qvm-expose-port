#!/bin/sh
#
# usage: qvm-expose-port [--perm] (vmname|nexthop) port
#
# When run in dom0, this script intends to align all the iptable forwarding chains and
# pinholes for each network qube between the physical network and that (deep) qube in
# order to expose that particular port in the given qube as "the real port" which your
# machine presents to the local area network (LAN).
#
# When run in a non-dom0 (guest) vm, this script intends to align the iptables only for
# the next "hop" in the chain.
#
# UNIMPLEMENTED:
# When run in a non-dom0 (guest) vm with the "--perm" flag, this script will instead
# try to make the settings permanent by mutating the rc.local file in such a way that it
# will call this script (without the perm flag) on restart, and removing (from the rc.local)
# any other calls to itself that match the port description.
#
# UNIMPLEMENTED:
# When run from dom0 with the "--perm" flag, this script will try to make the setting permanent
# by copying itself to the qube, and calling itself therefrom to modify the rc.local file using
# the procedure mentioned above. The purpose of "copying itself" is so that there is only one
# script to review & maintain (the one in dom0).
#
# It is intended that this script (unless run with the "--perm" flag) will make no lasting changes
# to either the iptables or filesystem of the guest vms or dom0.
#
# This iteration:
# https://github.com/Osndok/qvm-expose-port2
#
# Previous iterations (oldest first):
# https://gist.github.com/daktak/f887352d564b54f9e529404cc0eb60d5
# https://gist.github.com/jpouellet/d8cd0eb8589a5b9bf0c53a28fc530369
#
# Alternatives:
# https://github.com/niccokunzmann/qvm-expose-port
#

is_dom0() { test -e /dev/xen/xenbus_backend; }

usage()
{
	echo "Usage: ${0##*/} [--perm] <vm> <port>" >&2
	exit 1
}

if [ "${1:-x}" == "--perm" ]
then
	shift
	permanent() { true; }
else
	permanent() { false; }
fi

[ $# -eq 2 ] || usage
TARGET="$1"
PORT="$2"

dom0_ip() { qvm-ls --raw-data --fields=ip -- "$1"; }
dom0_netvm() { qvm-prefs -g -- "$1" netvm; }

dom0_forward()
{
	local from_domain=$1
	local to_domain=$2
	local port=$3

	local from_ip=$(dom0_ip "$from_domain")
	local to_ip=$(dom0_ip "$to_domain")
	iface=$(qvm-run -p -u root "$from_domain" "ifconfig \
		| grep -vE '^(vif|lo)' | grep -oE '^[^: ]+' | head -1")

	[ X"$from_ip" = XNone ] && from_ip=

	echo "$from_domain: forwarding on $iface port $port to $to_domain
		($from_ip -> $to_ip)" >&2
	qvm-run -p -u root "$from_domain" \
		"iptables -t nat -A PREROUTING -i $iface -p tcp \
		--dport $port ${from_ip:+-d} $from_ip \
		-j DNAT --to-destination $to_ip"
	qvm-run -p -u root "$from_domain" \
		"iptables -I FORWARD 2 -i $iface ${to_ip:+-d} $to_ip \
		-p tcp --dport $port -m conntrack --ctstate NEW -j ACCEPT"
}

qube_forward()
{
	ip -4 -o address | tr -s ' /' ' ' | cut -f2,4 -d' ' | while read IFACE IP
	do
		iptables -t nat -A PREROUTING -i "$IFACE" -p tcp --dport "$PORT" -d "$IP" -j DNAT --to-destination "$TARGET"
		iptables -I FORWARD 2 -i "$IFACE" -d "$TARGET" -p tcp --dport "$PORT" -m conntrack --ctstate NEW -j ACCEPT
	done
}

dom0_input()
{
	local domain=$1
	local port=$2

	echo "$domain: allowing input to port $port" >&2
	qvm-run -p -u root "$domain" "iptables -I INPUT 5 -p tcp \
		--dport $port -m conntrack --ctstate NEW -j ACCEPT"
}

dom0_recurse_netvms()
{
	local this_dom=$1
	local port=$2

	local outer_dom=$(dom0_netvm "$this_dom") || true

	if [ -n "$outer_dom" ]
	then
		dom0_forward "$outer_dom" "$this_dom" "$port"
		dom0_recurse_netvms "$outer_dom" "$port"
	fi
}

qube_update_rclocal()
{
	local SELF=$(realpath $0)
}

set -vx
set -eu

if is_dom0
then
	if permanent
	then
		echo 1>&2 "TODO: recursively copy self to qubes, and call dest script with the 'permanent' flag"
	else
		dom0_input "$TARGET" "$PORT"
		dom0_recurse_netvms "$TARGET" "$PORT"
	fi
else
	if permanent
	then
		qube_update_rclocal
	else
		qube_forward
	fi
fi
